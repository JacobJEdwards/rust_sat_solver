<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="103019"><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.02%)</title><rect x="0.0000%" y="197" width="0.0155%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="16"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (196 samples, 0.19%)</title><rect x="0.0194%" y="197" width="0.1903%" height="15" fill="rgb(217,0,24)" fg:x="20" fg:w="196"/><text x="0.2694%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (926 samples, 0.90%)</title><rect x="0.2097%" y="197" width="0.8989%" height="15" fill="rgb(221,193,54)" fg:x="216" fg:w="926"/><text x="0.4597%" y="207.50"></text></g><g><title>sat_solver`&lt;sat_solver::sat::propagation::WatchedLiterals&lt;L,S,A,_&gt; as sat_solver::sat::propagation::Propagator&lt;L,S,A&gt;&gt;::propagate (59 samples, 0.06%)</title><rect x="1.1085%" y="197" width="0.0573%" height="15" fill="rgb(248,212,6)" fg:x="1142" fg:w="59"/><text x="1.3585%" y="207.50"></text></g><g><title>sat_solver`&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (568 samples, 0.55%)</title><rect x="1.1658%" y="197" width="0.5514%" height="15" fill="rgb(208,68,35)" fg:x="1201" fg:w="568"/><text x="1.4158%" y="207.50"></text></g><g><title>sat_solver`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (313 samples, 0.30%)</title><rect x="1.7240%" y="197" width="0.3038%" height="15" fill="rgb(232,128,0)" fg:x="1776" fg:w="313"/><text x="1.9740%" y="207.50"></text></g><g><title>sat_solver`_rjem_malloc (208 samples, 0.20%)</title><rect x="2.0453%" y="197" width="0.2019%" height="15" fill="rgb(207,160,47)" fg:x="2107" fg:w="208"/><text x="2.2953%" y="207.50"></text></g><g><title>sat_solver`_rjem_sdallocx (179 samples, 0.17%)</title><rect x="2.2472%" y="197" width="0.1738%" height="15" fill="rgb(228,23,34)" fg:x="2315" fg:w="179"/><text x="2.4972%" y="207.50"></text></g><g><title>sat_solver`alloc::rc::Rc&lt;T,A&gt;::drop_slow (117 samples, 0.11%)</title><rect x="2.4209%" y="197" width="0.1136%" height="15" fill="rgb(218,30,26)" fg:x="2494" fg:w="117"/><text x="2.6709%" y="207.50"></text></g><g><title>sat_solver`core::slice::sort::shared::smallsort::insertion_sort_shift_left (88 samples, 0.09%)</title><rect x="2.5345%" y="197" width="0.0854%" height="15" fill="rgb(220,122,19)" fg:x="2611" fg:w="88"/><text x="2.7845%" y="207.50"></text></g><g><title>sat_solver`core::slice::sort::unstable::quicksort::partition (27 samples, 0.03%)</title><rect x="2.6199%" y="197" width="0.0262%" height="15" fill="rgb(250,228,42)" fg:x="2699" fg:w="27"/><text x="2.8699%" y="207.50"></text></g><g><title>sat_solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (29 samples, 0.03%)</title><rect x="2.6461%" y="197" width="0.0282%" height="15" fill="rgb(240,193,28)" fg:x="2726" fg:w="29"/><text x="2.8961%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (72 samples, 0.07%)</title><rect x="47.5670%" y="181" width="0.0699%" height="15" fill="rgb(216,20,37)" fg:x="49003" fg:w="72"/><text x="47.8170%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (112 samples, 0.11%)</title><rect x="47.6368%" y="181" width="0.1087%" height="15" fill="rgb(206,188,39)" fg:x="49075" fg:w="112"/><text x="47.8868%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (154 samples, 0.15%)</title><rect x="68.5815%" y="149" width="0.1495%" height="15" fill="rgb(217,207,13)" fg:x="70652" fg:w="154"/><text x="68.8315%" y="159.50"></text></g><g><title>sat_solver`DYLD-STUB$$memcpy (56 samples, 0.05%)</title><rect x="68.7310%" y="149" width="0.0544%" height="15" fill="rgb(231,73,38)" fg:x="70806" fg:w="56"/><text x="68.9810%" y="159.50"></text></g><g><title>sat_solver`_rjem_malloc (120 samples, 0.12%)</title><rect x="68.7854%" y="149" width="0.1165%" height="15" fill="rgb(225,20,46)" fg:x="70862" fg:w="120"/><text x="69.0354%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (66 samples, 0.06%)</title><rect x="69.3018%" y="133" width="0.0641%" height="15" fill="rgb(210,31,41)" fg:x="71394" fg:w="66"/><text x="69.5518%" y="143.50"></text></g><g><title>sat_solver`DYLD-STUB$$pthread_getspecific (60 samples, 0.06%)</title><rect x="69.3658%" y="133" width="0.0582%" height="15" fill="rgb(221,200,47)" fg:x="71460" fg:w="60"/><text x="69.6158%" y="143.50"></text></g><g><title>sat_solver`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (8,426 samples, 8.18%)</title><rect x="61.4945%" y="165" width="8.1791%" height="15" fill="rgb(226,26,5)" fg:x="63351" fg:w="8426"/><text x="61.7445%" y="175.50">sat_solver`..</text></g><g><title>sat_solver`smallvec::SmallVec&lt;A&gt;::try_grow (795 samples, 0.77%)</title><rect x="68.9019%" y="149" width="0.7717%" height="15" fill="rgb(249,33,26)" fg:x="70982" fg:w="795"/><text x="69.1519%" y="159.50"></text></g><g><title>sat_solver`_rjem_malloc (248 samples, 0.24%)</title><rect x="69.4328%" y="133" width="0.2407%" height="15" fill="rgb(235,183,28)" fg:x="71529" fg:w="248"/><text x="69.6828%" y="143.50"></text></g><g><title>sat_solver`_rjem_sdallocx (52 samples, 0.05%)</title><rect x="69.6736%" y="165" width="0.0505%" height="15" fill="rgb(221,5,38)" fg:x="71777" fg:w="52"/><text x="69.9236%" y="175.50"></text></g><g><title>sat_solver`_rjem_sdallocx.cold.1 (71 samples, 0.07%)</title><rect x="69.7240%" y="165" width="0.0689%" height="15" fill="rgb(247,18,42)" fg:x="71829" fg:w="71"/><text x="69.9740%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (58 samples, 0.06%)</title><rect x="69.7930%" y="149" width="0.0563%" height="15" fill="rgb(241,131,45)" fg:x="71900" fg:w="58"/><text x="70.0430%" y="159.50"></text></g><g><title>sat_solver`DYLD-STUB$$pthread_getspecific (74 samples, 0.07%)</title><rect x="69.8493%" y="149" width="0.0718%" height="15" fill="rgb(249,31,29)" fg:x="71958" fg:w="74"/><text x="70.0993%" y="159.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_12 (54 samples, 0.05%)</title><rect x="69.9211%" y="149" width="0.0524%" height="15" fill="rgb(225,111,53)" fg:x="72032" fg:w="54"/><text x="70.1711%" y="159.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_15 (65 samples, 0.06%)</title><rect x="69.9774%" y="149" width="0.0631%" height="15" fill="rgb(238,160,17)" fg:x="72090" fg:w="65"/><text x="70.2274%" y="159.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_6 (124 samples, 0.12%)</title><rect x="70.0405%" y="149" width="0.1204%" height="15" fill="rgb(214,148,48)" fg:x="72155" fg:w="124"/><text x="70.2905%" y="159.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_7 (163 samples, 0.16%)</title><rect x="70.1608%" y="149" width="0.1582%" height="15" fill="rgb(232,36,49)" fg:x="72279" fg:w="163"/><text x="70.4108%" y="159.50"></text></g><g><title>sat_solver`_rjem_sdallocx (842 samples, 0.82%)</title><rect x="69.7930%" y="165" width="0.8173%" height="15" fill="rgb(209,103,24)" fg:x="71900" fg:w="842"/><text x="70.0430%" y="175.50"></text></g><g><title>sat_solver`_rjem_sdallocx.cold.1 (293 samples, 0.28%)</title><rect x="70.3259%" y="149" width="0.2844%" height="15" fill="rgb(229,88,8)" fg:x="72449" fg:w="293"/><text x="70.5759%" y="159.50"></text></g><g><title>sat_solver`sat_solver::sat::propagation::WatchedLiterals&lt;L,S,A,_&gt;::handle_false (17,463 samples, 16.95%)</title><rect x="70.6103%" y="165" width="16.9512%" height="15" fill="rgb(213,181,19)" fg:x="72742" fg:w="17463"/><text x="70.8603%" y="175.50">sat_solver`sat_solver::sat..</text></g><g><title>sat_solver`&lt;sat_solver::sat::propagation::WatchedLiterals&lt;L,S,A,_&gt; as sat_solver::sat::propagation::Propagator&lt;L,S,A&gt;&gt;::propagate (41,247 samples, 40.04%)</title><rect x="47.7456%" y="181" width="40.0382%" height="15" fill="rgb(254,191,54)" fg:x="49187" fg:w="41247"/><text x="47.9956%" y="191.50">sat_solver`&lt;sat_solver::sat::propagation::WatchedLiterals&lt;L,S,A,_..</text></g><g><title>sat_solver`smallvec::SmallVec&lt;A&gt;::try_grow (229 samples, 0.22%)</title><rect x="87.5615%" y="165" width="0.2223%" height="15" fill="rgb(241,83,37)" fg:x="90205" fg:w="229"/><text x="87.8115%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.03%)</title><rect x="88.3090%" y="165" width="0.0272%" height="15" fill="rgb(233,36,39)" fg:x="90975" fg:w="28"/><text x="88.5590%" y="175.50"></text></g><g><title>sat_solver`_rjem_malloc (22 samples, 0.02%)</title><rect x="88.3458%" y="165" width="0.0214%" height="15" fill="rgb(226,3,54)" fg:x="91013" fg:w="22"/><text x="88.5958%" y="175.50"></text></g><g><title>sat_solver`&lt;smallvec::SmallVec&lt;A&gt; as core::clone::Clone&gt;::clone (711 samples, 0.69%)</title><rect x="87.7838%" y="181" width="0.6902%" height="15" fill="rgb(245,192,40)" fg:x="90434" fg:w="711"/><text x="88.0338%" y="191.50"></text></g><g><title>sat_solver`smallvec::SmallVec&lt;A&gt;::try_grow (110 samples, 0.11%)</title><rect x="88.3672%" y="165" width="0.1068%" height="15" fill="rgb(238,167,29)" fg:x="91035" fg:w="110"/><text x="88.6172%" y="175.50"></text></g><g><title>sat_solver`_rjem_malloc (32 samples, 0.03%)</title><rect x="88.4429%" y="149" width="0.0311%" height="15" fill="rgb(232,182,51)" fg:x="91113" fg:w="32"/><text x="88.6929%" y="159.50"></text></g><g><title>sat_solver`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (2,354 samples, 2.29%)</title><rect x="88.4740%" y="181" width="2.2850%" height="15" fill="rgb(231,60,39)" fg:x="91145" fg:w="2354"/><text x="88.7240%" y="191.50">s..</text></g><g><title>sat_solver`smallvec::SmallVec&lt;A&gt;::try_grow (46 samples, 0.04%)</title><rect x="90.7143%" y="165" width="0.0447%" height="15" fill="rgb(208,69,12)" fg:x="93453" fg:w="46"/><text x="90.9643%" y="175.50"></text></g><g><title>sat_solver`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (296 samples, 0.29%)</title><rect x="90.7590%" y="181" width="0.2873%" height="15" fill="rgb(235,93,37)" fg:x="93499" fg:w="296"/><text x="91.0090%" y="191.50"></text></g><g><title>sat_solver`DYLD-STUB$$pthread_getspecific (122 samples, 0.12%)</title><rect x="91.0570%" y="181" width="0.1184%" height="15" fill="rgb(213,116,39)" fg:x="93806" fg:w="122"/><text x="91.3070%" y="191.50"></text></g><g><title>sat_solver`_rjem_calloc (17 samples, 0.02%)</title><rect x="91.1754%" y="181" width="0.0165%" height="15" fill="rgb(222,207,29)" fg:x="93928" fg:w="17"/><text x="91.4254%" y="191.50"></text></g><g><title>sat_solver`_rjem_je_malloc_default (11 samples, 0.01%)</title><rect x="91.1919%" y="181" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="93945" fg:w="11"/><text x="91.4419%" y="191.50"></text></g><g><title>sat_solver`_rjem_malloc (607 samples, 0.59%)</title><rect x="91.2026%" y="181" width="0.5892%" height="15" fill="rgb(218,138,4)" fg:x="93956" fg:w="607"/><text x="91.4526%" y="191.50"></text></g><g><title>sat_solver`_rjem_sdallocx (345 samples, 0.33%)</title><rect x="91.7937%" y="181" width="0.3349%" height="15" fill="rgb(250,191,14)" fg:x="94565" fg:w="345"/><text x="92.0437%" y="191.50"></text></g><g><title>sat_solver`_rjem_sdallocx.cold.1 (136 samples, 0.13%)</title><rect x="92.1286%" y="181" width="0.1320%" height="15" fill="rgb(239,60,40)" fg:x="94910" fg:w="136"/><text x="92.3786%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (131 samples, 0.13%)</title><rect x="92.2607%" y="165" width="0.1272%" height="15" fill="rgb(206,27,48)" fg:x="95046" fg:w="131"/><text x="92.5107%" y="175.50"></text></g><g><title>sat_solver`DYLD-STUB$$pthread_getspecific (140 samples, 0.14%)</title><rect x="92.3878%" y="165" width="0.1359%" height="15" fill="rgb(225,35,8)" fg:x="95177" fg:w="140"/><text x="92.6378%" y="175.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_12 (120 samples, 0.12%)</title><rect x="92.5237%" y="165" width="0.1165%" height="15" fill="rgb(250,213,24)" fg:x="95317" fg:w="120"/><text x="92.7737%" y="175.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_13 (16 samples, 0.02%)</title><rect x="92.6402%" y="165" width="0.0155%" height="15" fill="rgb(247,123,22)" fg:x="95437" fg:w="16"/><text x="92.8902%" y="175.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_15 (125 samples, 0.12%)</title><rect x="92.6557%" y="165" width="0.1213%" height="15" fill="rgb(231,138,38)" fg:x="95453" fg:w="125"/><text x="92.9057%" y="175.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_6 (292 samples, 0.28%)</title><rect x="92.7771%" y="165" width="0.2834%" height="15" fill="rgb(231,145,46)" fg:x="95578" fg:w="292"/><text x="93.0271%" y="175.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_7 (308 samples, 0.30%)</title><rect x="93.0605%" y="165" width="0.2990%" height="15" fill="rgb(251,118,11)" fg:x="95870" fg:w="308"/><text x="93.3105%" y="175.50"></text></g><g><title>sat_solver`_rjem_sdallocx (1,816 samples, 1.76%)</title><rect x="92.2607%" y="181" width="1.7628%" height="15" fill="rgb(217,147,25)" fg:x="95046" fg:w="1816"/><text x="92.5107%" y="191.50"></text></g><g><title>sat_solver`_rjem_sdallocx.cold.1 (679 samples, 0.66%)</title><rect x="93.3643%" y="165" width="0.6591%" height="15" fill="rgb(247,81,37)" fg:x="96183" fg:w="679"/><text x="93.6143%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (201 samples, 0.20%)</title><rect x="94.0234%" y="133" width="0.1951%" height="15" fill="rgb(209,12,38)" fg:x="96862" fg:w="201"/><text x="94.2734%" y="143.50"></text></g><g><title>sat_solver`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (222 samples, 0.22%)</title><rect x="94.0234%" y="181" width="0.2155%" height="15" fill="rgb(227,1,9)" fg:x="96862" fg:w="222"/><text x="94.2734%" y="191.50"></text></g><g><title>sat_solver`alloc::raw_vec::finish_grow (222 samples, 0.22%)</title><rect x="94.0234%" y="165" width="0.2155%" height="15" fill="rgb(248,47,43)" fg:x="96862" fg:w="222"/><text x="94.2734%" y="175.50"></text></g><g><title>sat_solver`do_rallocx (222 samples, 0.22%)</title><rect x="94.0234%" y="149" width="0.2155%" height="15" fill="rgb(221,10,30)" fg:x="96862" fg:w="222"/><text x="94.2734%" y="159.50"></text></g><g><title>sat_solver`_rjem_je_large_ralloc (21 samples, 0.02%)</title><rect x="94.2185%" y="133" width="0.0204%" height="15" fill="rgb(210,229,1)" fg:x="97063" fg:w="21"/><text x="94.4685%" y="143.50"></text></g><g><title>sat_solver`_rjem_je_large_dalloc (21 samples, 0.02%)</title><rect x="94.2185%" y="117" width="0.0204%" height="15" fill="rgb(222,148,37)" fg:x="97063" fg:w="21"/><text x="94.4685%" y="127.50"></text></g><g><title>sat_solver`pac_dalloc_impl (21 samples, 0.02%)</title><rect x="94.2185%" y="101" width="0.0204%" height="15" fill="rgb(234,67,33)" fg:x="97063" fg:w="21"/><text x="94.4685%" y="111.50"></text></g><g><title>sat_solver`_rjem_je_extent_record (21 samples, 0.02%)</title><rect x="94.2185%" y="85" width="0.0204%" height="15" fill="rgb(247,98,35)" fg:x="97063" fg:w="21"/><text x="94.4685%" y="95.50"></text></g><g><title>sat_solver`_rjem_je_extent_dalloc_wrapper (21 samples, 0.02%)</title><rect x="94.2185%" y="69" width="0.0204%" height="15" fill="rgb(247,138,52)" fg:x="97063" fg:w="21"/><text x="94.4685%" y="79.50"></text></g><g><title>sat_solver`_rjem_je_extent_dalloc_mmap (21 samples, 0.02%)</title><rect x="94.2185%" y="53" width="0.0204%" height="15" fill="rgb(213,79,30)" fg:x="97063" fg:w="21"/><text x="94.4685%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (21 samples, 0.02%)</title><rect x="94.2185%" y="37" width="0.0204%" height="15" fill="rgb(246,177,23)" fg:x="97063" fg:w="21"/><text x="94.4685%" y="47.50"></text></g><g><title>sat_solver`core::hash::BuildHasher::hash_one (469 samples, 0.46%)</title><rect x="94.2389%" y="181" width="0.4553%" height="15" fill="rgb(230,62,27)" fg:x="97084" fg:w="469"/><text x="94.4889%" y="191.50"></text></g><g><title>sat_solver`core::ptr::drop_in_place&lt;bit_vec::MutBorrowedBit&lt;u32&gt;&gt; (497 samples, 0.48%)</title><rect x="94.6942%" y="181" width="0.4824%" height="15" fill="rgb(216,154,8)" fg:x="97553" fg:w="497"/><text x="94.9442%" y="191.50"></text></g><g><title>sat_solver`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (423 samples, 0.41%)</title><rect x="96.2356%" y="165" width="0.4106%" height="15" fill="rgb(244,35,45)" fg:x="99141" fg:w="423"/><text x="96.4856%" y="175.50"></text></g><g><title>sat_solver`_rjem_malloc (55 samples, 0.05%)</title><rect x="96.6579%" y="165" width="0.0534%" height="15" fill="rgb(251,115,12)" fg:x="99576" fg:w="55"/><text x="96.9079%" y="175.50"></text></g><g><title>sat_solver`OUTLINED_FUNCTION_7 (11 samples, 0.01%)</title><rect x="96.7472%" y="149" width="0.0107%" height="15" fill="rgb(240,54,50)" fg:x="99668" fg:w="11"/><text x="96.9972%" y="159.50"></text></g><g><title>sat_solver`_rjem_sdallocx (66 samples, 0.06%)</title><rect x="96.7258%" y="165" width="0.0641%" height="15" fill="rgb(233,84,52)" fg:x="99646" fg:w="66"/><text x="96.9758%" y="175.50"></text></g><g><title>sat_solver`_rjem_sdallocx.cold.1 (32 samples, 0.03%)</title><rect x="96.7589%" y="149" width="0.0311%" height="15" fill="rgb(207,117,47)" fg:x="99680" fg:w="32"/><text x="97.0089%" y="159.50"></text></g><g><title>sat_solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,510 samples, 2.44%)</title><rect x="95.1805%" y="181" width="2.4364%" height="15" fill="rgb(249,43,39)" fg:x="98054" fg:w="2510"/><text x="95.4305%" y="191.50">sa..</text></g><g><title>sat_solver`core::hash::BuildHasher::hash_one (852 samples, 0.83%)</title><rect x="96.7899%" y="165" width="0.8270%" height="15" fill="rgb(209,38,44)" fg:x="99712" fg:w="852"/><text x="97.0399%" y="175.50"></text></g><g><title>sat_solver`sat_solver::sat::propagation::WatchedLiterals&lt;L,S,A,_&gt;::handle_false (2,003 samples, 1.94%)</title><rect x="97.6169%" y="181" width="1.9443%" height="15" fill="rgb(236,212,23)" fg:x="100564" fg:w="2003"/><text x="97.8669%" y="191.50">s..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.02%)</title><rect x="99.5875%" y="165" width="0.0204%" height="15" fill="rgb(242,79,21)" fg:x="102594" fg:w="21"/><text x="99.8375%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 0.04%)</title><rect x="99.6573%" y="149" width="0.0379%" height="15" fill="rgb(211,96,35)" fg:x="102666" fg:w="39"/><text x="99.9073%" y="159.50"></text></g><g><title>sat_solver`_rjem_je_arena_ralloc (22 samples, 0.02%)</title><rect x="99.7010%" y="149" width="0.0214%" height="15" fill="rgb(253,215,40)" fg:x="102711" fg:w="22"/><text x="99.9510%" y="159.50"></text></g><g><title>sat_solver`do_rallocx (104 samples, 0.10%)</title><rect x="99.6350%" y="165" width="0.1010%" height="15" fill="rgb(211,81,21)" fg:x="102643" fg:w="104"/><text x="99.8850%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.01%)</title><rect x="99.8379%" y="133" width="0.0107%" height="15" fill="rgb(208,190,38)" fg:x="102852" fg:w="11"/><text x="100.0879%" y="143.50"></text></g><g><title>sat_solver`_rjem_je_arena_ralloc_no_move (29 samples, 0.03%)</title><rect x="99.9000%" y="117" width="0.0282%" height="15" fill="rgb(235,213,38)" fg:x="102916" fg:w="29"/><text x="100.1500%" y="127.50"></text></g><g><title>sat_solver`_rjem_je_arena_ralloc (72 samples, 0.07%)</title><rect x="99.8602%" y="133" width="0.0699%" height="15" fill="rgb(237,122,38)" fg:x="102875" fg:w="72"/><text x="100.1102%" y="143.50"></text></g><g><title>sat_solver`smallvec::SmallVec&lt;A&gt;::reserve_one_unchecked (396 samples, 0.38%)</title><rect x="99.5612%" y="181" width="0.3844%" height="15" fill="rgb(244,218,35)" fg:x="102567" fg:w="396"/><text x="99.8112%" y="191.50"></text></g><g><title>sat_solver`smallvec::SmallVec&lt;A&gt;::try_grow (216 samples, 0.21%)</title><rect x="99.7360%" y="165" width="0.2097%" height="15" fill="rgb(240,68,47)" fg:x="102747" fg:w="216"/><text x="99.9860%" y="175.50"></text></g><g><title>sat_solver`do_rallocx (153 samples, 0.15%)</title><rect x="99.7971%" y="149" width="0.1485%" height="15" fill="rgb(210,16,53)" fg:x="102810" fg:w="153"/><text x="100.0471%" y="159.50"></text></g><g><title>sat_solver`sat_solver::solve (100,261 samples, 97.32%)</title><rect x="2.6743%" y="197" width="97.3228%" height="15" fill="rgb(235,124,12)" fg:x="2755" fg:w="100261"/><text x="2.9243%" y="207.50">sat_solver`sat_solver::solve</text></g><g><title>sat_solver`smallvec::SmallVec&lt;A&gt;::try_grow (53 samples, 0.05%)</title><rect x="99.9456%" y="181" width="0.0514%" height="15" fill="rgb(224,169,11)" fg:x="102963" fg:w="53"/><text x="100.1956%" y="191.50"></text></g><g><title>all (103,019 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="103019"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`start (103,019 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="103019"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>sat_solver`main (103,019 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="103019"/><text x="0.2500%" y="271.50">sat_solver`main</text></g><g><title>sat_solver`std::sys::backtrace::__rust_begin_short_backtrace (103,019 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="103019"/><text x="0.2500%" y="255.50">sat_solver`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>sat_solver`sat_solver::main (103,019 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="103019"/><text x="0.2500%" y="239.50">sat_solver`sat_solver::main</text></g><g><title>sat_solver`sat_solver::solve_and_report (103,019 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="103019"/><text x="0.2500%" y="223.50">sat_solver`sat_solver::solve_and_report</text></g></svg></svg>